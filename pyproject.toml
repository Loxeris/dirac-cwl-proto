[build-system]
requires = ["setuptools>=42", "wheel", "setuptools_scm[toml]>=3.4"]
build-backend = "setuptools.build_meta"

[project]
name = "dirac_cwl_proto"
version = "0.1.0"
description = "Prototype of CWL used as a production/job workflow language"
readme = "README.md"
requires-python = ">=3.12"
license = {file = "LICENSE"}
authors = [
    { name="DIRAC consortium" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Distributed Computing"
]
dependencies = [
    "cwl-utils",
    "cwlformat",
    "cwltool",
    "lbprodrun",
    "mypy",
    "pydantic",
    "pyyaml",
    "typer",
    "referencing>=0.30",
    "rich",
    "ruamel.yaml"
]

[project.optional-dependencies]
testing = ["pytest>=6", "pytest-mock"]

[project.scripts]
dirac-cwl = "dirac_cwl_proto:app"
pi-simulate = "dirac_cwl_proto.modules.pi_simulate:app"
pi-simulate-v2 = "dirac_cwl_proto.modules.pi_simulate_v2:app"
pi-gather = "dirac_cwl_proto.modules.pi_gather:app"
crypto = "dirac_cwl_proto.modules.crypto:app"
lhcb-app = "dirac_cwl_proto.modules.lhcb_app:app"
random-data-gen = "dirac_cwl_proto.modules.random_data_gen:app"
gaussian-fit = "dirac_cwl_proto.modules.gaussian_fit:app"

[tool.setuptools_scm]

[tool.ruff]
select = ["E", "F", "B", "I", "PLE"]
ignore = ["B905", "B008", "B006"]
line-length = 120
src = ["src", "tests"]

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ["^tests/", "^build/"]
allow_redefinition = true
enable_error_code = ["import", "attr-defined"]

[tool.pytest.ini_options]
addopts = ["-v"]
asyncio_mode = "auto"

# Pixi configuration for task management
[tool.pixi.project]
channels = ["conda-forge", "pydantic"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
python = ">=3.12"
# Core dependencies
cwl-utils = "*"
cwlformat = "*"
cwltool = "*"
lbprodrun = "*"
mypy = "*"
pydantic = "*"
pyyaml = "*"
typer = "*"
referencing = ">=0.30"
rich = "*"
ruamel.yaml = "*"
# Testing dependencies
pytest = ">=6"
pytest-mock = "*"
# Schema validation
jsonschema = "*"

[tool.pixi.tasks]
# Help task
help = "echo 'Available tasks: install, test, lint, schemas, schemas-json, schemas-yaml, clean-schemas, test-schemas, test-meta, check-schemas, validate-schemas, dev-setup, ci-check'"

# Installation
install = "pip install -e . && pip install -e .[testing]"

# Testing tasks
test = "pytest test/ -v"
test-meta = "pytest test/test_metadata*.py test/test_workflows.py::test_run_job_success -k 'test_meta' -v"
test-schemas = "pytest test/test_workflows.py::test_run_job_success -k 'test_meta' -v"

# Linting
lint = "mypy src"

# Schema generation tasks
schemas-json = """
echo "Generating JSON schemas..." && \
python scripts/generate_schemas.py \
  --output-dir generated_schemas \
  --format json \
  --individual \
  --unified && \
echo "Copying schemas to test locations..." && \
cp generated_schemas/dirac-metadata.json test/workflows/test_meta/schemas/dirac-metadata.json
"""

schemas-yaml = """
echo "Generating YAML schemas..." && \
python scripts/generate_schemas.py \
  --output-dir generated_schemas \
  --format yaml \
  --unified
"""

schemas = { depends_on = ["schemas-json", "schemas-yaml"] }

# Cleanup
clean-schemas = """
echo "Cleaning generated schemas..." && \
rm -rf generated_schemas/ && \
rm -f test/workflows/test_meta/schemas/dirac-metadata.json
"""

# Schema validation
check-schemas = """
echo "Checking if schemas are up to date..." && \
python scripts/generate_schemas.py --output-dir /tmp/check_schemas --format json --unified > /dev/null 2>&1 && \
if ! diff -q generated_schemas/dirac-metadata.json /tmp/check_schemas/dirac-metadata.json > /dev/null 2>&1; then \
  echo "❌ Schemas are out of date. Run 'pixi run schemas' to update them." && \
  exit 1; \
else \
  echo "✅ Schemas are up to date."; \
fi && \
rm -rf /tmp/check_schemas
"""

validate-schemas = """
echo "Validating generated schemas..." && \
python -c "
import json, yaml
from pathlib import Path
[print(f'✓ {f}') or json.load(open(f)) for f in Path('generated_schemas').glob('**/*.json')]
[print(f'✓ {f}') or yaml.safe_load(open(f)) for f in Path('generated_schemas').glob('**/*.yaml')]
print('All schemas are valid!')
"
"""

# Development setup
dev-setup = { depends_on = ["install", "schemas"], cmd = """
echo "Development environment set up successfully!" && \
echo "Generated schemas are in: generated_schemas/" && \
echo "Run 'pixi run help' to see available commands."
""" }

# CI/CD pipeline
ci-check = { depends_on = ["lint", "test", "check-schemas", "validate-schemas"] }
