name: Generate Schemas

on:
  push:
    branches:
      - main
      - refactor_metadata  # Add current branch for testing
    paths:
      - 'src/dirac_cwl_proto/metadata/**'
      - 'src/dirac_cwl_proto/submission_models.py'
      - 'scripts/generate_schemas.py'
  pull_request:
    branches:
      - main
    paths:
      - 'src/dirac_cwl_proto/metadata/**'
      - 'src/dirac_cwl_proto/submission_models.py'
      - 'scripts/generate_schemas.py'
  workflow_dispatch:  # Allow manual triggering

defaults:
  run:
    shell: bash -el {0}

jobs:
  generate-schemas:
    name: Generate JSON Schemas from Pydantic Models
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history for proper git operations
          fetch-depth: 0
          # Use a token that can push to the repository
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: schema-gen-env
          create-args: >-
            python=3.12
            pip
          init-shell: bash
          post-cleanup: 'all'
      
      - name: Install dependencies
        run: |
          pip install .
          pip install pyyaml  # Additional dependency for YAML schema output
      
      - name: Generate schemas
        run: |
          echo "Generating JSON schemas from Pydantic models..."
          python scripts/generate_schemas.py \
            --output-dir generated_schemas \
            --format json \
            --individual \
            --unified
      
      - name: Generate YAML schemas (for convenience)
        run: |
          echo "Generating YAML schemas from Pydantic models..."
          python scripts/generate_schemas.py \
            --output-dir generated_schemas \
            --format yaml \
            --unified
      
      - name: Copy schemas to test locations
        run: |
          echo "Copying generated schemas to test locations..."
          # Update test meta schemas
          cp generated_schemas/dirac-metadata.json test/workflows/test_meta/schemas/dirac-metadata.json
          echo "Updated test schemas"
      
      - name: Check for schema changes
        id: check_changes
        run: |
          # Configure git for the CI user
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes in the generated schemas
          if git diff --quiet generated_schemas/ test/workflows/test_meta/schemas/; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No schema changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Schema changes detected"
            git diff --name-only generated_schemas/ test/workflows/test_meta/schemas/
          fi
      
      - name: Commit and push schema changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          echo "Committing schema changes..."
          git add generated_schemas/
          git add test/workflows/test_meta/schemas/
          git commit -m "Auto-generate schemas from Pydantic models

          This commit contains automatically generated JSON/YAML schemas from:
          - Core metadata models
          - Submission models  
          - All registered metadata plugins
          
          Generated by: ${{ github.workflow }} workflow
          Triggered by: ${{ github.event_name }}
          Commit: ${{ github.sha }}"
          
          # Push the changes
          git push
      
      - name: Verify schemas are valid
        run: |
          echo "Verifying generated schemas..."
          python -c "
          import json
          import yaml
          from pathlib import Path
          
          # Verify JSON schemas
          json_schemas = list(Path('generated_schemas').glob('**/*.json'))
          for schema_file in json_schemas:
              try:
                  with open(schema_file) as f:
                      json.load(f)
                  print(f'✓ Valid JSON: {schema_file}')
              except Exception as e:
                  print(f'✗ Invalid JSON: {schema_file} - {e}')
                  exit(1)
          
          # Verify YAML schemas
          yaml_schemas = list(Path('generated_schemas').glob('**/*.yaml'))
          for schema_file in yaml_schemas:
              try:
                  with open(schema_file) as f:
                      yaml.safe_load(f)
                  print(f'✓ Valid YAML: {schema_file}')
              except Exception as e:
                  print(f'✗ Invalid YAML: {schema_file} - {e}')
                  exit(1)
          
          print(f'All schemas are valid! Generated {len(json_schemas)} JSON and {len(yaml_schemas)} YAML files.')
          "
      
      - name: Upload schema artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-schemas
          path: |
            generated_schemas/
            test/workflows/test_meta/schemas/
          retention-days: 90
      
      - name: Comment on PR with schema changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the plugins summary
            let summaryContent = '';
            try {
              const summary = JSON.parse(fs.readFileSync('generated_schemas/plugins-summary.json', 'utf8'));
              summaryContent = `
            ## 📊 Plugin Summary
            - **Total Plugins**: ${summary.total_plugins}
            - **Experiments**: ${summary.experiments.filter(e => e !== null).join(', ') || 'None'}
            - **Core Plugins**: ${Object.keys(summary.plugins).filter(k => !summary.plugins[k].experiment).length}
            - **Experiment Plugins**: ${Object.keys(summary.plugins).filter(k => summary.plugins[k].experiment).length}
            `;
            } catch (e) {
              summaryContent = '\n*Could not read plugin summary*\n';
            }
            
            const message = `
            ## 🔄 Schema Generation Results
            
            This PR includes changes to Pydantic metadata models that affect the generated schemas.
            
            ${summaryContent}
            
            ### 📁 Generated Files
            - \`generated_schemas/dirac-metadata.json\` - Unified DIRAC metadata schema
            - \`generated_schemas/dirac-metadata.yaml\` - YAML version of unified schema
            - \`generated_schemas/plugins-summary.json\` - Summary of all registered plugins
            - \`generated_schemas/individual/\` - Individual schema files for each model
            - \`test/workflows/test_meta/schemas/\` - Updated test schemas
            
            ### ✅ Verification
            All generated schemas have been validated for JSON/YAML syntax correctness.
            
            ---
            *This comment was automatically generated by the Schema Generation workflow.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  test-with-generated-schemas:
    name: Test with Generated Schemas
    needs: generate-schemas
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: test-env
          create-args: >-
            python=3.12
            pip
          init-shell: bash
          post-cleanup: 'all'
      
      - name: Install dependencies
        run: |
          pip install .[testing]
      
      - name: Download generated schemas
        uses: actions/download-artifact@v4
        with:
          name: generated-schemas
          path: .
      
      - name: Run tests with generated schemas
        run: |
          echo "Running tests with generated schemas..."
          # Test the specific workflows that use schemas
          pytest test/test_workflows.py::test_run_job_success -k "test_meta" -v
          
          # Run a broader test to ensure nothing broke
          pytest test/test_workflows.py -v
